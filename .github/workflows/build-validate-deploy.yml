name: build validate deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  HEROKU_APP_NAME: nginx-uwsgi-flask

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: setup docker buildx
      uses: docker/setup-buildx-action@v1

    - name: build backend image
      uses: docker/build-push-action@v2
      with:
        context: backend
        file: backend/Dockerfile
        tags: ${{ env.HEROKU_APP_NAME }}/backend:staging
        outputs: type=docker,dest=/tmp/backend.tar

    - name: build server image
      uses: docker/build-push-action@v2
      with:
        context: server
        file: server/Dockerfile
        tags: ${{ env.HEROKU_APP_NAME }}/server:staging
        outputs: type=docker,dest=/tmp/server.tar

    - name: upload backend artifact
      uses: actions/upload-artifact@v2
      with:
        name: backend_staging
        path: /tmp/backend.tar

    - name: upload server artifact
      uses: actions/upload-artifact@v2
      with:
        name: server_staging
        path: /tmp/server.tar

  validate:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: setup docker buildx
      uses: docker/setup-buildx-action@v1

    - name: download backend artifact
      uses: actions/download-artifact@v2
      with:
        name: backend_staging
        path: /tmp
    
    - name: load backend image
      run: |
        docker load --input /tmp/backend.tar
        docker image ls

    - name: run backend container
      run: |
        docker run --rm -d -p 5555:5555 --name backend_staging ${{ env.HEROKU_APP_NAME }}/backend:staging
        status=$(docker container inspect -f "{{.State.Status}}" backend_staging)
        if [ -z $status ] || [ $status != "running" ]; then
          echo "the backend container is not running"
          exit 1
        fi
      shell: sh {0}

    - name: run test
      run: docker exec backend_staging /app/pytest.sh

    - name: always stop the container and never complain
      run: docker stop backend_staging
      if: ${{ always() }}
      shell: sh {0}

  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build, validate]
    env:
      HEROKU_REGISTRY: registry.heroku.com
    steps:
    - name: setup docker buildx
      uses: docker/setup-buildx-action@v1

    - name: download backend artifact
      uses: actions/download-artifact@v2
      with:
        name: backend_staging
        path: /tmp

    - name: download server artifact
      uses: actions/download-artifact@v2
      with:
        name: server_staging
        path: /tmp
    
    - name: load backend and server images
      run: |
        docker load --input /tmp/backend.tar
        docker load --input /tmp/server.tar
        docker image ls

    - name: tag images for heroku
      run: |
        docker tag ${{ env.HEROKU_APP_NAME }}/backend:staging ${{ env.HEROKU_REGISTRY }}/${{ env.HEROKU_APP_NAME }}/worker:latest
        docker tag ${{ env.HEROKU_APP_NAME }}/server:staging ${{ env.HEROKU_REGISTRY }}/${{ env.HEROKU_APP_NAME }}/web:latest
        docker image ls

    - name: login heroku registry
      run: echo "${{ secrets.HEROKU_API_KEY }}" | docker login -u ${{ secrets.HEROKU_USER }} ${{ env.HEROKU_REGISTRY }} --password-stdin

    - name: push images to heroku registry
      run: |
        docker image push ${{ env.HEROKU_REGISTRY }}/${{ env.HEROKU_APP_NAME }}/worker:latest
        docker image push ${{ env.HEROKU_REGISTRY }}/${{ env.HEROKU_APP_NAME }}/web:latest

    - name: deploy images to the application
      run: |
        HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }} heroku container:release web worker -a ${{ env.HEROKU_APP_NAME }}

    - name: deploy heroku.yml file
      run: |
        if [ -d /tmp/${{ env.HEROKU_APP_NAME }} ]; then rm -rf /tmp/${{ env.HEROKU_APP_NAME }}; fi
        mkdir -p /tmp/${{ env.HEROKU_APP_NAME }}
        cp heroku.yml /tmp/${{ env.HEROKU_APP_NAME }}
        cd /tmp/${{ env.HEROKU_APP_NAME }}
        git init
        heroku git:remote -a ${{ env.HEROKU_APP_NAME }}
        git add heroku.yml
        git commit -m "deploy with heroku.yml"
        git push -f heroku master

    - name: always logout from heroku registry and never complain
      run: docker logout ${{ env.HEROKU_REGISTRY }}
      if: ${{ always() }}
      shell: sh {0}